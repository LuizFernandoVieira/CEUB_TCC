Elm.Game = Elm.Game || {};
Elm.Game.Model = Elm.Game.Model || {};
Elm.Game.Model.make = function (_elm) {
   "use strict";
   _elm.Game = _elm.Game || {};
   _elm.Game.Model = _elm.Game.Model || {};
   if (_elm.Game.Model.values) return _elm.Game.Model.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Collision2D = Elm.Collision2D.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var zip = F2(function (xs,ys) {    return A3($List.map2,F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};}),xs,ys);});
   var withIndex = function (list) {    return A2(zip,_U.range(0,$List.length(list)),list);};
   var xFunc = function (index) {    return $Basics.toFloat(-350 + 32 * index);};
   var yFunc = function (index) {    return $Basics.toFloat(-400 + 32 * index);};
   var parseLine = function (line) {
      return A2($List.map,function (l) {    return xFunc($Basics.fst(l));},A2($List.filter,function (l) {    return _U.eq($Basics.snd(l),"*");},line));
   };
   var level = "\n  *****************\n  *                         *\n  *                         *\n  *                     *\n  *                         *\n  *     ******              *\n  *                         *\n  *                         *\n  *                         *\n  *                         *\n  *              *****      *\n  *                         *          \n  *                         *\n  *                         *\n  *      ****               *\n  *                         *\n  ***       *****************\n";
   var Game = F3(function (a,b,c) {    return {state: a,player: b,grounds: c};});
   var Ground = F3(function (a,b,c) {    return {x: a,y: b,rect: c};});
   var makeGroundLine = F2(function (index,line) {
      var xPos = parseLine(line);
      var yPos = yFunc(index);
      return A2($List.map,function (x) {    return A3(Ground,x,yPos,A4($Collision2D.rectangle,x,yPos,32,32));},xPos);
   });
   var lineToGround = function (line) {
      var line$ = $Basics.snd(line);
      var chars$ = withIndex(A2($List.map,$String.fromChar,$String.toList(line$)));
      var index = $Basics.fst(line);
      return A2(makeGroundLine,index,chars$);
   };
   var asciiToGround = function (string) {
      var splitted = A2($String.split,"\n",string);
      var lines = withIndex(splitted);
      return $List.concat(A2($List.map,lineToGround,lines));
   };
   var loadLevel = function (n) {    var level$ = level;return asciiToGround(level$);};
   var Player = F7(function (a,b,c,d,e,f,g) {    return {x: a,y: b,vx: c,vy: d,dir: e,rect: f,grounded: g};});
   var player = F7(function (x,y,vx,vy,dir,rect,grounded) {    return A7(Player,x,y,vx,vy,dir,rect,grounded);});
   var Right = {ctor: "Right"};
   var Left = {ctor: "Left"};
   var Pause = {ctor: "Pause"};
   var Play = {ctor: "Play"};
   var defaultGame = function () {
      var loadedGrounds = loadLevel(1);
      var playerRect = A4($Collision2D.rectangle,0,250,32,32);
      return {state: Play,player: A7(Player,0,250,0,0,Left,playerRect,false),grounds: loadedGrounds};
   }();
   var _p0 = {ctor: "_Tuple2",_0: 300,_1: 200};
   var halfWidth = _p0._0;
   var halfHeight = _p0._1;
   var _p1 = {ctor: "_Tuple2",_0: 600,_1: 400};
   var gameWidth = _p1._0;
   var gameHeight = _p1._1;
   return _elm.Game.Model.values = {_op: _op
                                   ,gameHeight: gameHeight
                                   ,gameWidth: gameWidth
                                   ,halfHeight: halfHeight
                                   ,halfWidth: halfWidth
                                   ,Play: Play
                                   ,Pause: Pause
                                   ,Left: Left
                                   ,Right: Right
                                   ,Player: Player
                                   ,Ground: Ground
                                   ,Game: Game
                                   ,player: player
                                   ,defaultGame: defaultGame
                                   ,loadLevel: loadLevel
                                   ,level: level
                                   ,asciiToGround: asciiToGround
                                   ,lineToGround: lineToGround
                                   ,makeGroundLine: makeGroundLine
                                   ,parseLine: parseLine
                                   ,yFunc: yFunc
                                   ,xFunc: xFunc
                                   ,withIndex: withIndex
                                   ,zip: zip};
};