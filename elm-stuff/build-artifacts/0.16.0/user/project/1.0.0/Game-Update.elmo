Elm.Game = Elm.Game || {};
Elm.Game.Update = Elm.Game.Update || {};
Elm.Game.Update.make = function (_elm) {
   "use strict";
   _elm.Game = _elm.Game || {};
   _elm.Game.Update = _elm.Game.Update || {};
   if (_elm.Game.Update.values) return _elm.Game.Update.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Collision2D = Elm.Collision2D.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Game$Input = Elm.Game.Input.make(_elm),
   $Game$Model = Elm.Game.Model.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var handleMaybe = function (x) {
      var _p0 = x;
      if (_p0.ctor === "Just") {
            return _p0._0;
         } else {
            return _U.crashCase("Game.Update",{start: {line: 125,column: 3},end: {line: 127,column: 53}},_p0)("error: fromJust Nothing");
         }
   };
   var isColliding = F2(function (ground,player) {    return A2($Collision2D.axisAlignedBoundingBox,player,ground);});
   var correctCollisions = F3(function (ground,_p2,player) {    var _p3 = _p2;return _U.update(player,{y: _p3._1,x: _p3._0});});
   var fullCollisions = F3(function (grounds,_p4,player) {
      fullCollisions: while (true) {
         var _p5 = _p4;
         var _p8 = _p5._1;
         var _p7 = _p5._0;
         var _p6 = grounds;
         if (_p6.ctor === "[]") {
               return player;
            } else {
               if (_p6._1.ctor === "[]") {
                     return A3(correctCollisions,_p6._0,{ctor: "_Tuple2",_0: _p7,_1: _p8},player);
                  } else {
                     var _v4 = _p6._1,_v5 = {ctor: "_Tuple2",_0: _p7,_1: _p8},_v6 = A3(correctCollisions,_p6._0,{ctor: "_Tuple2",_0: _p7,_1: _p8},player);
                     grounds = _v4;
                     _p4 = _v5;
                     player = _v6;
                     continue fullCollisions;
                  }
            }
      }
   });
   var updateCollisions = F3(function (grounds,_p9,player) {
      var _p10 = _p9;
      var grounds$ = A2($List.filter,function (g) {    return A2(isColliding,g.rect,player.rect);},grounds);
      var grounds$$ = A2($List.filter,
      F2(function (x,y) {    return _U.eq(x,y);})($Maybe.Just($Collision2D.Top)),
      A2($List.map,function (g) {    return A2($Collision2D.rectangleSide,player.rect,g.rect);},grounds$));
      return A3(fullCollisions,grounds$,{ctor: "_Tuple2",_0: _p10._0,_1: _p10._1},_U.update(player,{grounded: _U.cmp($List.length(grounds$),0) > 0}));
   });
   var collisionUpdate = function (player) {    return _U.update(player,{rect: A4($Collision2D.rectangle,player.x,player.y,32,32)});};
   var physicsUpdate = F2(function (dt,obj) {    return _U.update(obj,{x: obj.x + obj.vx * dt,y: obj.y + obj.vy * dt});});
   var jumpUpdate = F2(function (keys,player) {
      return _U.cmp(keys.y,0) > 0 && _U.eq(player.grounded,true) ? _U.update(player,{vy: 10.0,grounded: false}) : player;
   });
   var walkUpdate = F2(function (keys,player) {
      return _U.update(player,
      {vx: 5 * $Basics.toFloat(keys.x),dir: _U.cmp(keys.x,0) < 0 ? $Game$Model.Left : _U.cmp(keys.x,0) > 0 ? $Game$Model.Right : player.dir});
   });
   var gravityUpdate = F2(function (dt,player) {    return _U.update(player,{vy: _U.eq(player.grounded,true) ? 0 : player.vy - dt / 2});});
   var updatePlayer = F4(function (dt,keys,player,game) {
      var oldY = player.y;
      var oldX = player.x;
      return A3(updateCollisions,
      game.grounds,
      {ctor: "_Tuple2",_0: oldX,_1: oldY},
      collisionUpdate(A2(physicsUpdate,dt,A2(jumpUpdate,keys,A2(walkUpdate,keys,A2(gravityUpdate,dt,player))))));
   });
   var updateCamera = F2(function (camera,player) {    return _U.update(camera,{x: player.x,y: player.y});});
   var update = F2(function (_p11,game) {
      var _p12 = _p11;
      var player$ = A4(updatePlayer,_p12._0,_p12._1,game.player,game);
      var newState = $Game$Model.Play;
      return _U.update(game,{state: newState,player: player$,camera: A2(updateCamera,game.camera,player$)});
   });
   return _elm.Game.Update.values = {_op: _op
                                    ,update: update
                                    ,updateCamera: updateCamera
                                    ,updatePlayer: updatePlayer
                                    ,gravityUpdate: gravityUpdate
                                    ,walkUpdate: walkUpdate
                                    ,jumpUpdate: jumpUpdate
                                    ,physicsUpdate: physicsUpdate
                                    ,collisionUpdate: collisionUpdate
                                    ,updateCollisions: updateCollisions
                                    ,fullCollisions: fullCollisions
                                    ,correctCollisions: correctCollisions
                                    ,isColliding: isColliding
                                    ,handleMaybe: handleMaybe};
};