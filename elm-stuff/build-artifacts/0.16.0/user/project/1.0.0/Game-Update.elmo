Elm.Game = Elm.Game || {};
Elm.Game.Update = Elm.Game.Update || {};
Elm.Game.Update.make = function (_elm) {
   "use strict";
   _elm.Game = _elm.Game || {};
   _elm.Game.Update = _elm.Game.Update || {};
   if (_elm.Game.Update.values) return _elm.Game.Update.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Collision2D = Elm.Collision2D.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Game$Input = Elm.Game.Input.make(_elm),
   $Game$Model = Elm.Game.Model.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var handleMaybe = function (x) {
      var _p0 = x;
      if (_p0.ctor === "Just") {
            return _p0._0;
         } else {
            return _U.crashCase("Game.Update",{start: {line: 111,column: 3},end: {line: 113,column: 53}},_p0)("error: fromJust Nothing");
         }
   };
   var correctCollisions = F3(function (ground,oldY,player) {
      var rect$ = ground.rect;
      return A2($Collision2D.axisAlignedBoundingBox,player.rect,rect$) ? _U.update(player,{y: oldY,grounded: true}) : _U.update(player,
      {y: player.y,grounded: player.grounded});
   });
   var percorreLista = F3(function (grounds,oldY,player) {
      percorreLista: while (true) {
         var _p2 = grounds;
         if (_p2.ctor === "[]") {
               return player;
            } else {
               if (_p2._1.ctor === "[]") {
                     return A3(correctCollisions,_p2._0,oldY,player);
                  } else {
                     var _v2 = _p2._1,_v3 = oldY,_v4 = A3(correctCollisions,_p2._0,oldY,player);
                     grounds = _v2;
                     oldY = _v3;
                     player = _v4;
                     continue percorreLista;
                  }
            }
      }
   });
   var fullCollisions = F3(function (_p3,oldY,player) {    var _p4 = _p3;return A3(percorreLista,_p4.grounds,oldY,player);});
   var collisionUpdate = function (player) {    return _U.update(player,{rect: A4($Collision2D.rectangle,player.x,player.y,32,32)});};
   var physicsUpdate = F2(function (dt,obj) {    return _U.update(obj,{x: obj.x + obj.vx * dt,y: obj.y + obj.vy * dt});});
   var jumpUpdate = F2(function (keys,player) {
      return _U.cmp(keys.y,0) > 0 && _U.eq(player.grounded,true) ? _U.update(player,{vy: 10.0,grounded: false}) : player;
   });
   var walkUpdate = F2(function (keys,player) {
      return _U.update(player,
      {vx: 5 * $Basics.toFloat(keys.x),dir: _U.cmp(keys.x,0) < 0 ? $Game$Model.Left : _U.cmp(keys.x,0) > 0 ? $Game$Model.Right : player.dir});
   });
   var gravityUpdate = F2(function (dt,player) {    return _U.update(player,{vy: _U.eq(player.grounded,true) ? 0 : player.vy - dt / 2});});
   var updatePlayer = F4(function (dt,keys,player,game) {
      var oldY = player.y;
      var oldX = player.x;
      return A3(fullCollisions,game,oldY,collisionUpdate(A2(physicsUpdate,dt,A2(jumpUpdate,keys,A2(walkUpdate,keys,A2(gravityUpdate,dt,player))))));
   });
   var update = F2(function (_p5,game) {
      var _p6 = _p5;
      var newState = $Game$Model.Play;
      return _U.update(game,{state: newState,player: A4(updatePlayer,_p6._0,_p6._1,game.player,game)});
   });
   return _elm.Game.Update.values = {_op: _op
                                    ,update: update
                                    ,updatePlayer: updatePlayer
                                    ,gravityUpdate: gravityUpdate
                                    ,walkUpdate: walkUpdate
                                    ,jumpUpdate: jumpUpdate
                                    ,physicsUpdate: physicsUpdate
                                    ,collisionUpdate: collisionUpdate
                                    ,fullCollisions: fullCollisions
                                    ,percorreLista: percorreLista
                                    ,correctCollisions: correctCollisions
                                    ,handleMaybe: handleMaybe};
};